{
    "Overview": {
        "addHeader": {
            "header": "How does an FTC game work?",
            "attrs": {
                "id": "how-ftc-game-works"
            }
        },
        "addContent": {
            "content": "The First Tech Challenge is made up of two different periods where both you and your allied team face an alliance  of two other teams. These periods are an autonomous mode and a TeleOp mode. Every game starts in the autonomous mode which is active for 30  seconds and in this period the robot must run a preset program without human input to complete tasks and objectives within the bounds of the  game. Then the 2:30 minute TeleOp mode begins where players must control their robot with game controllers to complete tasks and score points  as fast as possible. The last 30 seconds of the TeleOp mode constitute the endgame time where special rules apply and it is possible to score  more points. To see a more in depth explanation of this year's game check out  <a class=outside-link aria-label=\"Check out this year's game manuals\" target=_blank  href=https://www.firstinspires.org/resource-library/ftc/game-and-season-info>the game manuals</a>."
        }
    },
    "Programming": [
        {
            "addHeader": {
                "header": "How do you program for FTC?",
                "attrs": {
                    "id": "programming-guide",
                    "class": "documentation-header"
                }
            }
        },
        {
            "addTitle": {
                "title": "Overview:"
            },
            "addContent": {
                "content": "When programming a robot for the First Tech Challenge, one must use Android Studio, a REV driver hub (tablet), and a REV control hub. So, how does code from a computer program a robot's movements in TeleOp and autonomous modes? Code is pushed from a computer running Android Studio to the REV control hub which has motors, servos, sensors, and other hardware parts plugged into it via different colorful cables. So, the REV control hub is attached to the rest of the robot on the actual drivetrain and code is pushed to it from a computer using Android Studio software. The driver hub serves as the human interface for running code already uploaded onto the robot. This means that the driver hub is where controllers are plugged in, camera systems can be checked, telemetry is read, and where different OpModes are run from with a simple GUI."
            }
        },
        {
            "addTitle": {
                "title": "Getting Started:"
            }, 
            "addContent": {
                "content": "To get started fork <a class=outside-link aria-label=\"Fork this year's github sdk\" target=_blank href=https://github.com/FIRST-Tech-Challenge/FtcRobotController>the ftc sdk</a> and copy the link to the fork to paste it into Android Studio (Create new project > Get from VCS > Paste link > Clone). Note you need to have <a class=outside-link aria-label=\"Download Git here to use it in Android Studio\" target=_blank href=https://git-scm.com/downloads>git downloaded</a>. By doing this you will get your own version of the interface to the robotics parts to mess with. <br> Once you have this repository in your Android Studio, navigate to TeamCode and go through the various folders and make three files at the end: <code>Hardware.java</code>, <code>TeleOp.java</code>, <code>Auto.java</code>. This is where you will write your code, but you would only want your <code>Teleop</code> and <code>Auto</code> classes to be runnable from the driver hub tablet."
            }
        },
        {
            "addTitle": {
                "title": "Making an OpMode"
            }, 
            "addContent": {
                "content": "In both the <code>Teleop</code> and <code>Auto</code> classes (java files), create a class and add the correct <code>@TeleOp</code> or <code>@Autonomous</code> annotation with the name that your class will display on the driver station. Then just create the classes and leave them there for now. See the examples below.<br>"
            }
        },
        {
            "addTitle": {
                "title": "Init:"
            }, 
            "addContent": {
                "content": "By this stage in the robotics game, no robots have moved and controllers are left alone. In the program, this is where all hardware needs to be initialized (hence the name) into the program. Usually code initializing hardware is written into an <code>init()</code> method in the <code>Hardware</code> class (file). When extending "
            }
        },
        {
            "addTitle": {
                "title": "OpMode Movement:"
            },
            "addContent": {
                "content": " Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec eu turpis sed libero placerat pretium. Sed et metus cursus, faucibus augue vitae, posuere turpis. Sed iaculis, libero ac tempor porttitor, sem dui consequat sem, sit amet fringilla erat mauris varius leo. Donec sollicitudin bibendum sem, at maximus arcu consectetur vel. Cras vestibulum urna id dolor efficitur pulvinar. Integer cursus tortor sit amet purus finibus, at ullamcorper nibh feugiat. Integer tempor dolor sed lectus accumsan mollis. Proin quis purus auctor, congue mauris a, placerat ipsum. Pellentesque facilisis blandit purus, in tempor quam posuere a. Suspendisse ut mollis felis. Aenean sit amet eros pharetra, fringilla felis nec, imperdiet nisl. Morbi purus massa, aliquet vitae lorem sed, vehicula eleifend lectus. Nulla molestie odio a turpis pharetra, sed interdum arcu tempor. Aliquam condimentum, lorem quis tempor condimentum, lectus magna scelerisque est, quis gravida felis urna eu massa. <br/><br/>Nulla quis vestibulum sapien. Nulla varius ultricies mollis. Aenean eget sapien condimentum, aliquam ipsum sed, placerat tortor. Nulla facilisi. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Maecenas metus arcu, interdum vitae lobortis id, accumsan nec arcu. Mauris nunc velit, volutpat at nunc consequat, ultricies tristique ligula."
            },
            "addImage": {
                "imagePath": "/Assets/Images/meccanum.avif",
                "imageCaptionText": "How Mecannum wheels move (fig. 1)",
                "altText": "To drive forward, backward, or to strafe, the left slant wheels move together and the right slant wheels move together. However to rotate skid-steer style, the left slant wheels move counter to one another as do the right slant wheels - this requires four separate channels on your motor controller."
            }
        },
        {
            "addTitle": {
                "title": "CV:"
            }, 
            "addContent": {
                "content": "Lorem Ipsum"
            }
        }
    ],
    "Cad": [
        {
            "addHeader": {
                "header": "How do you CAD for FTC?",
                "attrs": {
                    "id": "cad-guide",
                    "class": "documentation-header"
                }
            }
        },
        {
            "addTitle": {
                "title": "Software to use:"
            },
            "addContent": {
                "content": "Lorem Ipsum"
            }
        }
    ],
    "Building": [
        {
            "addHeader": {
                "header": "How do you build for FTC?",
                "attrs": {
                    "id": "build-guide",
                    "class": "documentation-header"
                }
            }
        },
        {
            "addTitle": {
                "title": "Useful Resources:"
            },
            "addContent": {
                "content": "Lorem Ipsum"
            }
        }
    ]
}